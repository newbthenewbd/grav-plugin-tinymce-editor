{% block label %}
	{% if field.label %}
		{% set hint = field.help ? 'data-hint="' ~ field.help|tu|raw ~ '"': '' %}
		<div class="form-label form-field hint--bottom" {{ hint }}>{{ field.label|tu|raw }}</div>
	{% endif %}
{% endblock %}
{% block field %}
	<div class="form-field {{ field.classes|default('') }}">
		<div class="form-data">
			<textarea
				class="tinymce"
				name="{{ (scope ~ field.name)|fieldName }}"
				{% if field.disabled or isDisabledToggleable %}disabled="disabled"{% endif %}
				{% if field.placeholder %}placeholder="{{ field.placeholder|tu }}"{% endif %}
				{% if field.autofocus in ['on', 'true', 1] %}autofocus="autofocus"{% endif %}
				{% if field.novalidate in ['on', 'true', 1] %}novalidate="novalidate"{% endif %}
				{% if field.readonly in ['on', 'true', 1] %}readonly="readonly"{% endif %}
			>{{ value|join("\n")|e("html") }}</textarea>
		</div>
	</div>
	<script>
		tinymce.init({
			selector:"textarea.tinymce",
			convert_urls:false,
			document_base_url:$("[id=grav-dropzone]").attr("data-media-local")+"/../"+(""{% if context.modular %}+"../"{% endif %}),
			language_url:"{{ url('user://data/tinymce-editor/js/tinymce/langs/' ~ grav.user.language ~ '.js')|default(url('user://data/tinymce-editor/js/tinymce/langs/' ~ grav.user.language ~ '_' ~ (grav.user.language|upper) ~ '.js')|default(url('plugins://tinymce-editor/js/tinymce/langs/' ~ grav.user.language ~ '.js')|default(url('plugins://tinymce-editor/js/tinymce/langs/' ~ grav.user.language ~ '_' ~ (grav.user.language|upper) ~ '.js')))) }}",
			plugins:"{{ config.plugins["tinymce-editor"].plugins|join(" ")|e("js") }}",
			{% for key in config.plugins["tinymce-editor"].parameters|keys %}
				"{{ config.plugins["tinymce-editor"].parameters[key].name|e("js") }}":function(x) {
					try{return JSON.parse(x)}catch(e){return x}
				}("{{ config.plugins["tinymce-editor"].parameters[key].value|e("js") }}"),
			{% endfor %}
			menubar:{% if config.plugins["tinymce-editor"].menubar %}true{% else %}false{% endif %},
			menu:{
				{% for key in config.plugins["tinymce-editor"].menu|keys %}
					{{ key }}:{
						title:"{{ config.plugins["tinymce-editor"].menu[key].title|e("js") }}",
						items:"{{ config.plugins["tinymce-editor"].menu[key].items|e("js") }}"
					},
				{% endfor %}
			},
			toolbar:[
				{% for fields in config.plugins["tinymce-editor"].toolbar %}
					{% for row in fields %}
						'{{ row|e("js") }}',
					{% endfor %}
				{% endfor %}
			],
			branding:{% if config.plugins["tinymce-editor"].branding %}true{% else %}false{% endif %},
			statusbar:{% if config.plugins["tinymce-editor"].statusbar %}true{% else %}false{% endif %},
			block_formats: "{{ config.plugins["tinymce-editor"].block_formats|e("js") }}",
			style_formats: {{ config.plugins["tinymce-editor"].style_formats|json_encode()|raw }},
			content_css: "{% if config.theme.tinymce_styles %}{{ theme_url }}{{ config.theme.tinymce_styles }}{% endif %}",
			invalid_elements: "span",
			extended_valid_elements: "span[!class]",
			invalid_styles: {
			}
		});
		$(window).on("load", function() {
			$("div.dropzone").on("click", "a.dz-insert", function() {
				var dir = $("[id=grav-dropzone]").attr("data-media-local")+"/";
				var safedir = $("[id=grav-dropzone]").attr("data-media-path")+"/";
				var src = $(this).parent().find("[data-dz-name]").text();
				var file = new Image();
				file.onload = function() {
					$("[aria-label='Insert/edit image'] button").click();
					$("div.mce-window input.mce-textbox:first").val(dir+src);
				};
				file.onerror = function() {
					file = new Audio();
					file.onload = function() {
						tinyMCE.activeEditor.plugins.media.showDialog();
						$("div.mce-window input.mce-textbox:first").val(dir+src);
					};
					file.onerror = function() {
						$("[aria-label='Insert/edit link'] button").click();
						$("div.mce-window input.mce-textbox:eq(1)").val(src);
						$("div.mce-window input.mce-textbox:first").val(dir+src);
					};
					file.src = safedir+src;
				};
				file.src = safedir+src;
			});
		});
	</script>
{% endblock %}
